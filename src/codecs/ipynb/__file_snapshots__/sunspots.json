{
  "type": "Article",
  "references": [
    {
      "type": "Article",
      "authors": [
        {
          "type": "Person",
          "familyNames": [
            "Perez"
          ],
          "givenNames": [
            "Fernando"
          ]
        },
        {
          "type": "Person",
          "familyNames": [
            "Granger"
          ],
          "givenNames": [
            "Brian E."
          ]
        }
      ],
      "datePublished": {
        "type": "Date",
        "value": "2007"
      },
      "identifiers": [
        {
          "type": "PropertyValue",
          "name": "doi",
          "propertyID": "https://registry.identifiers.org/registry/doi",
          "value": "10.1109/mcse.2007.53"
        }
      ],
      "isPartOf": {
        "type": "PublicationIssue",
        "isPartOf": {
          "type": "PublicationVolume",
          "isPartOf": {
            "type": "Periodical",
            "name": "Computing in Science & Engineering"
          },
          "volumeNumber": 9
        },
        "issueNumber": 3
      },
      "pageEnd": 29,
      "pageStart": 21,
      "publisher": {
        "type": "Organization",
        "name": "Institute of Electrical and Electronics Engineers (IEEE)"
      },
      "title": "IPython: A System for Interactive Scientific Computing",
      "url": "http://dx.doi.org/10.1109/mcse.2007.53"
    },
    "Back to Part 1",
    "Back to FICO Labs"
  ],
  "meta": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.4"
    }
  },
  "content": [
    {
      "type": "Heading",
      "depth": 2,
      "content": [
        "Getting started"
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "OK, let's just dive right in and fill in details as we go. I'll be using Python for this exploration but will focus on the story and not the code. "
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "First things first, let's load the sunspots data, which is easy to find (e.g. ",
        {
          "type": "Link",
          "target": "ftp://ftp.ngdc.noaa.gov/STP/SOLAR_DATA/SUNSPOT_NUMBERS/",
          "content": [
            "from NOAA"
          ]
        },
        ") and conveniently included in a popular Python package for doing statistical work..."
      ]
    },
    {
      "type": "CodeChunk",
      "programmingLanguage": "python",
      "text": "import statsmodels.api as sm\nimport pandas as pd\ndata_loader = sm.datasets.sunspots.load_pandas()\ndf = data_loader.data",
      "meta": {
        "execution_count": 1
      }
    },
    {
      "type": "Paragraph",
      "content": [
        {
          "type": "CodeFragment",
          "text": "df"
        },
        " is shorthand for \"dataframe\", which we can think of as an Excel-like table of values. Dataframes have various methods that can be called to easily learn about the data contained in them, and we'll step through calling some of these methods. Below, we see that we have 309 pairs of (year, activity) to examine..."
      ]
    },
    {
      "type": "CodeChunk",
      "outputs": [
        {
          "type": "CodeBlock",
          "programmingLanguage": "text",
          "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 309 entries, 0 to 308\nData columns:\nYEAR           309  non-null values\nSUNACTIVITY    309  non-null values\ndtypes: float64(2)"
        }
      ],
      "programmingLanguage": "python",
      "text": "df",
      "meta": {
        "execution_count": 2
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "We can quickly inspect the first and last handful of values to get an idea of what the data look like..."
      ]
    },
    {
      "type": "CodeChunk",
      "outputs": [
        {
          "type": "Table",
          "rows": [
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": []
                },
                {
                  "type": "TableCell",
                  "content": [
                    "YEAR"
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    "SUNACTIVITY"
                  ]
                }
              ],
              "rowType": "header"
            },
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": [
                    {
                      "type": "Strong",
                      "content": [
                        "0"
                      ]
                    }
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    1700
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    5
                  ]
                }
              ]
            },
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": [
                    {
                      "type": "Strong",
                      "content": [
                        "1"
                      ]
                    }
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    1701
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    11
                  ]
                }
              ]
            },
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": [
                    {
                      "type": "Strong",
                      "content": [
                        "2"
                      ]
                    }
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    1702
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    16
                  ]
                }
              ]
            },
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": [
                    {
                      "type": "Strong",
                      "content": [
                        "3"
                      ]
                    }
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    1703
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    23
                  ]
                }
              ]
            },
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": [
                    {
                      "type": "Strong",
                      "content": [
                        "4"
                      ]
                    }
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    1704
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    36
                  ]
                }
              ]
            }
          ]
        }
      ],
      "programmingLanguage": "python",
      "text": "df.head()",
      "meta": {
        "execution_count": 3
      }
    },
    {
      "type": "CodeChunk",
      "outputs": [
        {
          "type": "Table",
          "rows": [
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": []
                },
                {
                  "type": "TableCell",
                  "content": [
                    "YEAR"
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    "SUNACTIVITY"
                  ]
                }
              ],
              "rowType": "header"
            },
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": [
                    {
                      "type": "Strong",
                      "content": [
                        "304"
                      ]
                    }
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    2004
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    40.4
                  ]
                }
              ]
            },
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": [
                    {
                      "type": "Strong",
                      "content": [
                        "305"
                      ]
                    }
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    2005
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    29.8
                  ]
                }
              ]
            },
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": [
                    {
                      "type": "Strong",
                      "content": [
                        "306"
                      ]
                    }
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    2006
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    15.2
                  ]
                }
              ]
            },
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": [
                    {
                      "type": "Strong",
                      "content": [
                        "307"
                      ]
                    }
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    2007
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    7.5
                  ]
                }
              ]
            },
            {
              "type": "TableRow",
              "cells": [
                {
                  "type": "TableCell",
                  "content": [
                    {
                      "type": "Strong",
                      "content": [
                        "308"
                      ]
                    }
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    2008
                  ]
                },
                {
                  "type": "TableCell",
                  "content": [
                    2.9
                  ]
                }
              ]
            }
          ]
        }
      ],
      "programmingLanguage": "python",
      "text": "df.tail()",
      "meta": {
        "execution_count": 4
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "OK, so the time series of annual values starts in 1700 and goes through 2008. Notice that we have fractional numbers in the more recent observations. This got me wondering when these fractional values started appearing..."
      ]
    },
    {
      "type": "CodeChunk",
      "outputs": [
        {
          "type": "CodeBlock",
          "programmingLanguage": "text",
          "text": "49    0.9\n50    0.4\n51    0.7\n52    0.8\n53    0.7\nName: SUNACTIVITY"
        }
      ],
      "programmingLanguage": "python",
      "text": "fractional_nums = df['SUNACTIVITY'].apply(lambda x: x % 1) #Take the modulo of each value with 1 to get the fractional part\nfractional_nums[fractional_nums > 0].head()",
      "meta": {
        "execution_count": 5
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "The first fractional value occurs in 1749. I looked into this a bit and (re)learned a few things:"
      ]
    },
    {
      "type": "List",
      "items": [
        {
          "type": "ListItem",
          "content": [
            {
              "type": "Paragraph",
              "content": [
                "Galileo first documented sunspots in the early 1600s, using his newly invented ",
                {
                  "type": "Emphasis",
                  "content": [
                    "telescope"
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "ListItem",
          "content": [
            {
              "type": "Paragraph",
              "content": [
                "Reliable sunspot observations begin in about 1700"
              ]
            }
          ]
        },
        {
          "type": "ListItem",
          "content": [
            {
              "type": "Paragraph",
              "content": [
                "The fractional numbers are probably associated with data coming out of Zurich, Switzerland in 1749 onward"
              ]
            }
          ]
        },
        {
          "type": "ListItem",
          "content": [
            {
              "type": "Paragraph",
              "content": [
                "The methodology for tallying sunspot counts has evolved, most notably in 1848 with the introduction of the ",
                {
                  "type": "Link",
                  "target": "http://en.wikipedia.org/wiki/Wolf_number",
                  "content": [
                    "Wolf number"
                  ]
                },
                " (which  is not simply an integer count)"
              ]
            }
          ]
        },
        {
          "type": "ListItem",
          "content": [
            {
              "type": "Paragraph",
              "content": [
                "There seems to be a ",
                {
                  "type": "Link",
                  "target": "http://www.leif.org/research/IAUS286-Mendoza-Svalgaard.pdf",
                  "content": [
                    "fair bit of debate"
                  ]
                },
                " about how accurate the existing data are"
              ]
            }
          ]
        }
      ],
      "order": "unordered"
    },
    {
      "type": "Paragraph",
      "content": [
        "With some context in hand regarding the data generating process, let's get back to exploring the data. We can get a quick sense of the distribution of values..."
      ]
    },
    {
      "type": "CodeChunk",
      "outputs": [
        {
          "type": "CodeBlock",
          "programmingLanguage": "text",
          "text": "count    309.000000\nmean      49.752104\nstd       40.452595\nmin        0.000000\n25%       16.000000\n50%       40.000000\n75%       69.800000\nmax      190.200000\n"
        }
      ],
      "programmingLanguage": "python",
      "text": "print df['SUNACTIVITY'].describe()",
      "meta": {
        "execution_count": 6
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "...and of course, any time we report statistics we should try to provide an accompanying visualization (and vice versa)..."
      ]
    },
    {
      "type": "CodeChunk",
      "outputs": [
        {
          "type": "ImageObject",
          "contentUrl": "",
          "format": "image/png"
        }
      ],
      "programmingLanguage": "python",
      "text": "df.plot(x='YEAR', y='SUNACTIVITY', xlim=(1700,2008))",
      "meta": {
        "execution_count": 7
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "Clearly there is a seasonal pattern in activity. If our aim was to fit a model to these data we would want to start looking at the autocorrelation and partial autocorrelation functions..."
      ]
    },
    {
      "type": "CodeChunk",
      "outputs": [
        {
          "type": "ImageObject",
          "contentUrl": "",
          "format": "image/png"
        }
      ],
      "programmingLanguage": "python",
      "text": "pd.tools.plotting.autocorrelation_plot(df['SUNACTIVITY'])",
      "meta": {
        "execution_count": 8
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "That the blue line goes beyond the horizontal grey lines indicates that this is a non-stationary time series with correlation structure. For my purposes here, I am not interested in fitting a model to the data. Instead, I just want to learn more about the length of the typical sunspot cycle. For this need it helps to view the time series' autocorrelation function in the ",
        {
          "type": "Emphasis",
          "content": [
            "frequency"
          ]
        },
        " domain instead of the temporal domain. So, we create an array of frequencies to evaluate the series over..."
      ]
    },
    {
      "type": "CodeChunk",
      "programmingLanguage": "python",
      "text": "import numpy as np\nN2 = df.shape[0] / 2\nfreqs = np.linspace(0, 0.5, num=N2, endpoint=False)[1:] #Nyquist range",
      "meta": {
        "execution_count": 9
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "...then, using these frequencies, plot the ",
        {
          "type": "Emphasis",
          "content": [
            "periodogram"
          ]
        },
        ", which is the frequency domain analog of the autocorrelation plot above. Note that the ",
        {
          "type": "Link",
          "target": "http://en.wikipedia.org/wiki/Least-squares_spectral_analysis",
          "content": [
            "Lomb-Scargle method"
          ]
        },
        " used below assumes that the frequencies are not in a typical unit like Hertz (cycles per second) but rather as ",
        {
          "type": "Link",
          "target": "http://en.wikipedia.org/wiki/Angular_frequency",
          "content": [
            "angular frequencies"
          ]
        },
        ", which is why we need to multiply the values by ",
        {
          "type": "MathFragment",
          "mathLanguage": "tex",
          "text": "2\\pi"
        },
        ". (The Lomb-Scargle method is flexible in that the time series need not be uniformly sampled.)"
      ]
    },
    {
      "type": "CodeChunk",
      "outputs": [
        {
          "type": "ImageObject",
          "contentUrl": "",
          "format": "image/png"
        }
      ],
      "programmingLanguage": "python",
      "text": "import scipy as sp\nperiodogram = sp.signal.lombscargle(df['YEAR'], df['SUNACTIVITY'], freqs * 2 * np.pi)\nplt.plot(freqs, periodogram, color='green')",
      "meta": {
        "execution_count": 10
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "We see a big spike in the power of the series at a frequency of just below 0.1. Recall that these are yearly observations, so we can divide this frequency into 1 to get the period of each cycle..."
      ]
    },
    {
      "type": "CodeChunk",
      "outputs": [
        {
          "type": "CodeBlock",
          "programmingLanguage": "text",
          "text": "Frequency and corresponding time in years at max power: 0.09, 11.0\n"
        }
      ],
      "programmingLanguage": "python",
      "text": "freq_index_at_max_power = np.argmax(periodogram)\nprint 'Frequency and corresponding time in years at max power: %.2f, %.1f' % (freqs[freq_index_at_max_power], 1 / freqs[freq_index_at_max_power])",
      "meta": {
        "execution_count": 11
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "The major cycle is about 11 years, which is what the literature states. So, we could have skipped this previous step entirely and just assumed the data had an 11 year cycle like the literature said, but it is always good to sanity check what you are working with, and of course, in many settings one does not already know such things, hence the need for exploration."
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "At this point, after a handful of lines of code and some internet searches we have a basic handle on:"
      ]
    },
    {
      "type": "List",
      "items": [
        {
          "type": "ListItem",
          "content": [
            {
              "type": "Paragraph",
              "content": [
                "The data generating process"
              ]
            }
          ]
        },
        {
          "type": "ListItem",
          "content": [
            {
              "type": "Paragraph",
              "content": [
                "Distributional information"
              ]
            }
          ]
        },
        {
          "type": "ListItem",
          "content": [
            {
              "type": "Paragraph",
              "content": [
                "Temporal behavior"
              ]
            }
          ]
        }
      ],
      "order": "unordered"
    },
    {
      "type": "Paragraph",
      "content": [
        "There are a lot of things we could dive into further, but now comes the question that ties back to the title of this post: was our basic line plot of the time series data as helpful as it could be? After all, we simply plotted the data using default settings with respect to plot window size and axes scaling."
      ]
    },
    {
      "type": "Heading",
      "depth": 2,
      "content": [
        "Optimizing aspect ratio"
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "In the following code segments we'll develop a method for finding ",
        {
          "type": "Emphasis",
          "content": [
            "an"
          ]
        },
        " optimal aspect ratio of the plot for the sunspots data (my use of the indefinite article rather than \"the optimal\" is purposeful: we just want to improve upon the default plot size and not necessarily find the truly best size). The code will follow the notation that Cleveland uses in the ",
        {
          "type": "Emphasis",
          "content": [
            "The Details of Banking to 45",
            {
              "type": "MathFragment",
              "mathLanguage": "tex",
              "text": "^\\circ"
            }
          ]
        },
        " section in ",
        {
          "type": "Link",
          "target": "",
          "content": [
            1
          ]
        },
        "."
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "The first thing we do is set up the vertical and horizontal range of the data we'll be plotting..."
      ]
    },
    {
      "type": "CodeChunk",
      "programmingLanguage": "python",
      "text": "v_data = df['SUNACTIVITY'].max() - df['SUNACTIVITY'].min()\nh_data = df['YEAR'].max() - df['YEAR'].min()\nv_data_diffs = df['SUNACTIVITY'].diff().apply(np.abs)\nvbar_data_diffs = v_data_diffs / v_data    \nh_data_diffs = df['YEAR'].diff().apply(np.abs)\nhbar_data_diffs = h_data_diffs / h_data",
      "meta": {
        "execution_count": 12
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "Next, we'll define our objective function that we want to optimize. This function gets evaluated for each aspect ratio we want to test, and for each evaluation it calls a few supporting functions..."
      ]
    },
    {
      "type": "CodeChunk",
      "programmingLanguage": "python",
      "text": "def objective_fcn(width_height, target):\n    dev = setup_device_coords(figsize=width_height)\n    lengths = segment_lengths(dev['aspect ratio'], dev['horizontal_device'])\n    weighted_avg_banking =  np.sum(segment_orientations(dev['aspect ratio']) * lengths) / np.sum(lengths)  \n    return np.abs(weighted_avg_banking - target)",
      "meta": {
        "execution_count": 13
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "The ",
        {
          "type": "CodeFragment",
          "text": "setup_device_coords"
        },
        " function maps data coordinates to screen coordinates and calculates the vertical and horizontal range of the data in terms of their screen positions..."
      ]
    },
    {
      "type": "CodeChunk",
      "programmingLanguage": "python",
      "text": "def setup_device_coords(figsize=(8,6)):\n    h_device, v_device = figsize\n    fig, ax = plot_sunspots(figsize)\n    device_coords = [ax.transData.transform(data_coords) for data_coords in df.values]\n    df_device = pd.DataFrame(device_coords, columns=['YEAR', 'SUNACTIVITY'])    \n    v_device = df_device['SUNACTIVITY'].max() - df_device['SUNACTIVITY'].min()\n    h_device = df_device['YEAR'].max() - df_device['YEAR'].min()\n    aspect_ratio = v_device / h_device\n    v_conversion = v_device / v_data  \n    h_conversion = h_device / h_data\n    fig.clear()\n    return {'aspect ratio': aspect_ratio,\n            'vertical_device': v_device,\n            'horizontal_device': h_device,\n            'vertical conversion': v_conversion,\n            'horizontal conversion': h_conversion}",
      "meta": {
        "execution_count": 14
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "To do the data-to-screen conversion the ",
        {
          "type": "CodeFragment",
          "text": "setup_device_coords"
        },
        " function calls a supporting function to render a plot of the data in device memory..."
      ]
    },
    {
      "type": "CodeChunk",
      "programmingLanguage": "python",
      "text": "def plot_sunspots(figsize, color='blue'):\n    fig = plt.figure(figsize=figsize)\n    fig.canvas.set_window_title('%.1f by %.1f inch window' % (figsize[0], figsize[1]))\n    ax1 = fig.add_subplot(111)\n    df.plot(x='YEAR', y='SUNACTIVITY', ax=ax1, linewidth=2, color=color)\n    fig.tight_layout()\n    ax1.set_xlim(right=df['YEAR'].max())\n    ax1.set_ylim(top=df['SUNACTIVITY'].max())\n    ax1.set_ylabel('Observed Sunspots')\n    ax1.set_title('Sunspot Activity Over Time')\n    return (fig, ax1)",
      "meta": {
        "execution_count": 15
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "Back to the supporting functions called by ",
        {
          "type": "CodeFragment",
          "text": "objective_fcn"
        },
        ", we need to deteremine the lengths and slopes of each line segment in a given plot. The banking method calculates the average orientation of the line segments, where the averaging is weighted by each line segment's length."
      ]
    },
    {
      "type": "CodeChunk",
      "programmingLanguage": "python",
      "text": "def segment_lengths(aspect_ratio, h_device):\n    return h_device * np.sqrt(hbar_data_diffs.dropna()**2 + aspect_ratio**2 * vbar_data_diffs.dropna()**2)",
      "meta": {
        "execution_count": 16
      }
    },
    {
      "type": "CodeChunk",
      "programmingLanguage": "python",
      "text": "def segment_orientations(aspect_ratio):\n    return np.arctan(aspect_ratio * vbar_data_diffs / hbar_data_diffs)",
      "meta": {
        "execution_count": 17
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "With the objective function (and its supporting functions) defined, we now need a few lines of code to drive everything. We set our desired average banking of the line segments to be 45 degrees (although the algorithms work in units of radians) and then define a grid of possible plot sizes to evaluate the objective function over. Note that the optimization method is called ",
        {
          "type": "CodeFragment",
          "text": "brute"
        },
        " for a reason: it is a just a brute-force scan of every possible plot size, where we have defined what is possible. Since I already have experience with these data I am limiting the search to be over plotting windows that are longer than they are tall, and I am only searching over ",
        {
          "type": "MathFragment",
          "mathLanguage": "tex",
          "text": "\\frac{1}{2}"
        },
        " inch step-sizes in the window dimensions because we are not interested in a super-precise solution. The last line of code unpacks a list of values returned in the ",
        {
          "type": "CodeFragment",
          "text": "results"
        },
        " variable into individual variables that we can work with directly."
      ]
    },
    {
      "type": "CodeChunk",
      "programmingLanguage": "python",
      "text": "import scipy.optimize as spo\ntarget = np.radians(45)   \nslice_obj = np.s_[20:26:0.5, # widths\n                  1:4:0.5]   # heights              \nresults = spo.brute(objective_fcn, slice_obj, args=[target], full_output=True, finish=None)\noptimal_dims, objective_val, search_grid, objective_grid = results",
      "meta": {
        "execution_count": 18
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "With the optimal plot size determined, let's compare how the time series plot looks using the default aspect ratio versus the optimized one..."
      ]
    },
    {
      "type": "CodeChunk",
      "outputs": [
        {
          "type": "CodeBlock",
          "programmingLanguage": "text",
          "text": "\n\nWeighted-average banking using default 8 x 6 inch plot window: 87.3 degrees (goal is 45 degrees)\n"
        },
        {
          "type": "ImageObject",
          "contentUrl": "",
          "format": "image/png"
        }
      ],
      "programmingLanguage": "python",
      "text": "plt.close('all')\nax1 = plot_sunspots((8,6))\nprint '\\n\\nWeighted-average banking using default 8 x 6 inch plot window: 87.3 degrees (goal is 45 degrees)' ",
      "meta": {
        "execution_count": 19
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "This is the same plot we saw above, but bigger and with axes labels. The default aspect ratio leaves us with line segments that have an average orientation of ",
        {
          "type": "Emphasis",
          "content": [
            "nearly vertical"
          ]
        },
        ", so this is a perfect example of the type of problem Cleveland was researching: It is very difficult to perceive patterns in the data when the rates of change over small chunks of time are so extreme. About all we can say is \"there are cycles roughly every 10 years\"."
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "Now let's look at the same data plotted using an aspect ratio that makes the average line segment have an absolute orientation of 45 degrees..."
      ]
    },
    {
      "type": "CodeChunk",
      "outputs": [
        {
          "type": "CodeBlock",
          "programmingLanguage": "text",
          "text": "\n\nOptimal width and height found to be 25.0 by 1.5 inches\nAverage banking interval at optimized aspect ratio: (44.91, 45.09)\n"
        },
        {
          "type": "ImageObject",
          "contentUrl": "",
          "format": "image/png"
        }
      ],
      "programmingLanguage": "python",
      "text": "ax2 = plot_sunspots(optimal_dims, color='red')\nprint '\\n\\nOptimal width and height found to be %.1f by %.1f inches' % (optimal_dims[0], optimal_dims[1])    \nbanking = [np.degrees(target - objective_val),\n           np.degrees(target + objective_val)]    \nprint 'Average banking interval at optimized aspect ratio: (%.2f, %.2f)' % (banking[0], banking[1])",
      "meta": {
        "execution_count": 20
      }
    },
    {
      "type": "Paragraph",
      "content": [
        "(When I run this same code on my laptop I get an optimal width of 22.5 inches by the same 1.5 inch height.)"
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "Ah, now we see something ",
        {
          "type": "Strong",
          "content": [
            "entirely new"
          ]
        },
        ": when there are large spikes in activity the ramp up period is asymmetric with the ramp down period. Specifically, activity ramps up very quickly and tapers off more gradually. In contrast, during weaker cycles the pattern is more symmetric. This nonlinear behavior is interesting and highly studied. But, we might never investigate further had we simply plotted the data in a naive way and moved on to something else."
      ]
    },
    {
      "type": "Heading",
      "depth": 2,
      "content": [
        "Lessons"
      ]
    },
    {
      "type": "List",
      "items": [
        {
          "type": "ListItem",
          "content": [
            {
              "type": "Paragraph",
              "content": [
                "Even the most pedestrian data task, like plotting an array of values, still requires careful thought if the aim is gaining insight. Without such thought it is remarkably easy to have one's work amount to little more than generating chart porn for PowerPoint decks"
              ]
            }
          ]
        },
        {
          "type": "ListItem",
          "content": [
            {
              "type": "Paragraph",
              "content": [
                "Default settings in visualization tools are there for expediency. We will encounter plenty of opportunities that warrant going beyond these ",
                {
                  "type": "Emphasis",
                  "content": [
                    "defaults"
                  ]
                },
                " to instead put ",
                {
                  "type": "Emphasis",
                  "content": [
                    "intention"
                  ]
                },
                " behind our graphical results"
              ]
            }
          ]
        }
      ],
      "order": "ascending"
    },
    {
      "type": "Heading",
      "depth": 2,
      "content": [
        "Extensions"
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "The exploration presented here was a quick first take and there a couple of places we could improve upon. First, the method that Cleveland developed ~ 20 years ago has seen extensions, such as ",
        {
          "type": "Link",
          "target": "http://vis.berkeley.edu/papers/banking/",
          "content": [
            {
              "type": "Emphasis",
              "content": [
                "multiscale banking"
              ]
            }
          ]
        },
        ". Second, the optimization method was easy to use and understand, but a more general, faster-converging approach is certainly possible."
      ]
    },
    {
      "type": "Heading",
      "depth": 2,
      "content": [
        "About this post"
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "This ",
        {
          "type": "Strong",
          "content": [
            "entire"
          ]
        },
        " post (executable code, results, surrounding text, and text formatting) was created using the ",
        {
          "type": "Link",
          "target": "http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html",
          "content": [
            "IPython Notebook"
          ]
        },
        ", an amazing extension of IPython",
        {
          "type": "Link",
          "target": "",
          "content": [
            2
          ]
        },
        " that supports highly interactive, collaborative, and reproducible numerical computing. For the many cases in which I want my code to be linked with rich context, it is hard to see ",
        {
          "type": "Emphasis",
          "content": [
            "not"
          ]
        },
        " using the Notebook. If your use case is focused more on text, with a bit of code interlaced, then using tools like ",
        {
          "type": "Link",
          "target": "http://www.stat.uni-muenchen.de/~leisch/Sweave/",
          "content": [
            "Sweave"
          ]
        },
        " in R or ",
        {
          "type": "Link",
          "target": "http://mpastell.com/pweave/",
          "content": [
            "Pweave"
          ]
        },
        " in Python are excellent options for supporting transparent, reproducible work (John Cook has a nice ",
        {
          "type": "Link",
          "target": "http://www.johndcook.com/blog/2012/12/20/basics-of-sweave-and-pweave/",
          "content": [
            "blog post"
          ]
        },
        " about this nuanced difference in use cases). In either case, there are no longer excuses for not tightly coupling code, analytical results, and context ",
        {
          "type": "CodeFragment",
          "text": ":)"
        }
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "The notebook file can be downloaded directly from a ",
        {
          "type": "Link",
          "target": "https://gist.github.com/4597218",
          "content": [
            "Gist"
          ]
        },
        " on my GitHub account. If you do not use Python you can still view the file using the free, web-based ",
        {
          "type": "Link",
          "target": "http://nbviewer.ipython.org/",
          "content": [
            "IPython Notebook Viewer"
          ]
        },
        ", which is how you areviewing this part of the post."
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "If you dabble in building on this exploration, please share it!"
      ]
    }
  ]
}